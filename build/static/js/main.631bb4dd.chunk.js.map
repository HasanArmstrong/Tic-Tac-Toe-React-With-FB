{"version":3,"sources":["serviceWorker.js","facebooklogin.js","index.js"],"names":["Boolean","window","location","hostname","match","FacebookRoute","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTest","asyncToGenerator","regenerator_default","a","mark","_callee","data","resp","json","wrap","_context","prev","next","URLSearchParams","append","name","score","fetch","method","headers","Content-Type","body","toString","sent","console","log","stop","responseFacebook","setState","isLoggedIn","username","state","_this2","react_default","createElement","className","facebook_login_with_button_default","appId","autoLoad","callback","onClick","Component","Square","_ref","value","Board","props","handleClick","i","copyOfSquares","squares","slice","calculateWinner","xIsNext","startTime","Date","now","startTimes","push","Array","fill","timeDiff","src_Square","count","status","winner","timeDiffs","length","concat","Math","floor","renderSquare","React","Game","_this3","getHighScores","highScores","items","src_Board","map","item","player","facebooklogin","lines","_lines$i","slicedToArray","b","c","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.631bb4dd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport FacebookLogin from 'react-facebook-login';\n\nclass FacebookRoute extends Component {\n  constructor(){\n    super();\n    this.state={\n      isLoggedIn: false,\n      username: null\n    }\n  }\n\n   handleTest= async () => {\n     // make post request to server to write high score\n     let data= new URLSearchParams();\n     data.append('player',resp.name)\n     data.append('score',resp.score)\n \n     const url ='http://ftw-highscores.herokuapp.com/tictactoe-dev'\n    const resp= await fetch(url,{\n      method:'POST',\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: data.toString(),\n      json: true,\n    });\n    let json = await resp.json();\n    console.log('received response', json);\n   }\n\n  responseFacebook = (resp) => {\n    console.log(resp)\n   this.setState({\n    isLoggedIn: true,\n    username: resp.name\n   })\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      \n      <h1>Welcome to My App</h1>\n     \n      {this.state.isLoggedIn ? null: <FacebookLogin\n        appId=\"319866152003850\"\n        autoLoad={true}\n        callback={(resp) => this.responseFacebook(resp)} />}\n         <p>Username: {this.state.username}</p>\n         <button onClick={this.handleTest}>Send new high score</button>\n      </div>\n    \n    );\n  }\n}\n\nexport default FacebookRoute;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FacebookRoute from './facebooklogin'\n\n\n\n// class Square extends React.Component {\n//   constructor(){\n//     super();\n//     this.state ={\n//       value:null\n//     }\n//   }\n//   render() {\n//     return (\n//       <button className=\"square\" onClick={() => this.props.onClick()}>\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\n\n\nconst Square = ({onClick, value}) => \n<button className=\"square\" onClick={onClick}>\n{value}\n</button>\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: !null,\n      startTimes:[],\n      timeDiff: null\n    };\n  }\n\n  handleClick=(i)=> {\n\n    const copyOfSquares = this.state.squares.slice();\n    if (calculateWinner(copyOfSquares) || copyOfSquares[i]) {\n      return;\n    }\n    copyOfSquares[i]= this.state.xIsNext ? 'X' : 'O';\n\n    let startTime= Date.now();\n    this.state.startTimes.push(startTime);\n    console.log(this.state.startTimes)\n    this.setState({\n      squares: copyOfSquares,\n      xIsNext: !this.state.xIsNext\n    });\n   \n\n  }\n\n   \n\n  renderSquare(i) {\n    // passing in value\n    return <Square value= {this.state.squares[i]}\n                  onClick={() => this.handleClick(i)}/>;\n  }\n\n  render() {\n    console.count(\"render board\");\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      let timeDiffs=this.state.startTimes[this.state.startTimes.length-1]-this.state.startTimes[0]\n      status = `Winner:  ${winner} ${Math.floor(timeDiffs/1000)} seconds`;\n    }  \n     else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nclass Game extends React.Component {\n  constructor(){\n    super();\n    this.state= {\n      highScores:[]\n    }\n  }\n\n  getHighScores = async () => {\n    const url ='https://ftw-highscores.herokuapp.com/tictactoe-dev'\n    const resp= await fetch(url)\n    let json= await resp.json()\n    this.setState({\n      highScores:json.items\n    })\n  }\n\n  componentDidMount(){\n    this.getHighScores();\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n        <p>High Scores</p>\n          {this.state.highScores.map(item => <li>{item.player}: {item.score}</li>)}\n        </div>\n        <FacebookRoute/>\n      </div>\n    );\n  }\n\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n// ========================================\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}